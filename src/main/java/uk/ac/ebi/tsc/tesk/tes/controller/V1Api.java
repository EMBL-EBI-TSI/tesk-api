/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.ac.ebi.tsc.tesk.tes.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.kubernetes.client.ApiException;
import uk.ac.ebi.tsc.tesk.common.data.tes.TesCancelTaskResponse;
import uk.ac.ebi.tsc.tesk.common.data.tes.TesCreateTaskResponse;
import uk.ac.ebi.tsc.tesk.common.data.tes.TesListTasksResponse;
import uk.ac.ebi.tsc.tesk.common.data.tes.TesServiceInfo;
import uk.ac.ebi.tsc.tesk.common.data.tes.TesTask;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-16T12:59:29.706Z")

@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    @ApiOperation(value = "Cancel a task.", notes = "", response = TesCancelTaskResponse.class, tags={ "TaskService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = TesCancelTaskResponse.class) })
    
    @RequestMapping(value = "/v1/tasks/{id}:cancel",
        produces = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TesCancelTaskResponse> cancelTask(@ApiParam(value = "",required=true ) @PathVariable("id") String id);


    @ApiOperation(value = "Create a new task.", notes = "", response = TesCreateTaskResponse.class, tags={ "TaskService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = TesCreateTaskResponse.class) })
    
    @RequestMapping(value = "/v1/tasks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TesCreateTaskResponse> createTask(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TesTask body);


    @ApiOperation(value = "GetServiceInfo provides information about the service, such as storage details, resource availability, and  other documentation.", notes = "", response = TesServiceInfo.class, tags={ "TaskService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = TesServiceInfo.class) })
    
    @RequestMapping(value = "/v1/tasks/service-info",
        produces = { "application/json" }, 
        consumes = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<TesServiceInfo> getServiceInfo();


    @ApiOperation(value = "Get a task. TaskView is requested as such: \"v1/tasks/{id}?view=FULL\"", notes = "", response = TesTask.class, tags={ "TaskService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = TesTask.class) })
    
    @RequestMapping(value = "/v1/tasks/{id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<TesTask> getTask(@ApiParam(value = "",required=true ) @PathVariable("id") String id,@ApiParam(value = "OPTIONAL. Affects the fields included in the returned Task messages. See TaskView below.   - MINIMAL: Task message will include ONLY the fields:   Task.Id   Task.State  - BASIC: Task message will include all fields EXCEPT:   Task.ExecutorLog.stdout   Task.ExecutorLog.stderr   Input.content   TaskLog.system_logs  - FULL: Task message includes all fields.", allowableValues = "MINIMAL, BASIC, FULL", defaultValue = "MINIMAL") @RequestParam(value = "view", required = false, defaultValue="MINIMAL") String view);


    @ApiOperation(value = "List tasks. TaskView is requested as such: \"v1/tasks?view=BASIC\"", notes = "", response = TesListTasksResponse.class, tags={ "TaskService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = TesListTasksResponse.class) })
    
    @RequestMapping(value = "/v1/tasks",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<TesListTasksResponse> listTasks(@ApiParam(value = "OPTIONAL. Filter the list to include tasks where the name matches this prefix. If unspecified, no task name filtering is done.") @RequestParam(value = "name_prefix", required = false) String namePrefix,@ApiParam(value = "OPTIONAL. Number of tasks to return in one page. Must be less than 2048. Defaults to 256.") @RequestParam(value = "page_size", required = false) Long pageSize,@ApiParam(value = "OPTIONAL. Page token is used to retrieve the next page of results. If unspecified, returns the first page of results. See ListTasksResponse.next_page_token") @RequestParam(value = "page_token", required = false) String pageToken,@ApiParam(value = "OPTIONAL. Affects the fields included in the returned Task messages. See TaskView below.   - MINIMAL: Task message will include ONLY the fields:   Task.Id   Task.State  - BASIC: Task message will include all fields EXCEPT:   Task.ExecutorLog.stdout   Task.ExecutorLog.stderr   Input.content   TaskLog.system_logs  - FULL: Task message includes all fields.", allowableValues = "MINIMAL, BASIC, FULL", defaultValue = "MINIMAL") @RequestParam(value = "view", required = false, defaultValue="MINIMAL") String view);

}
